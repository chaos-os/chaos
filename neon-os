#!/bin/env bash

# This is set to catch hidden bugs
set -euo pipefail

cat etc/banner.txt
echo ""
echo "############################################################################" 
echo "########                   INSTALLING NEON-OS                       ########" 
echo "############################################################################" 

echo "---C----           adding and populating pacman-keys                ---C----"  
sudo pacman-key --init
sudo pacman-key --populate
grep -qxF "keyserver.ubuntu.com:80" /etc/pacman.d/gnupg/gpg.conf || echo "keyserver hkp://keyserver.ubuntu.com:80" | sudo tee -a /etc/pacman.d/gnupg/gpg.conf
grep -qxF "keyserver.ubuntu.com:443" /etc/pacman.d/gnupg/gpg.conf || echo "keyserver hkps://keyserver.ubuntu.com:443" | sudo tee -a /etc/pacman.d/gnupg/gpg.conf
sudo pacman-key --recv-key 51F9A14D1DEE561A
sudo pacman-key --lsign-key 51F9A14D1DEE561A

echo "---C----           syncing and updating repositories                ---C----" 
sudo pacman -Syu --noconfirm --needed

echo "---C----           virtual machine or bare metal                    ---C----" 
read -p "are you running archlinux in virtual environment [y/n]? " answer
if [[ $answer == "y" || $answer == "Y" ]]
then
    echo "proceeding to install open source graphics drivers"
    sudo pacman -S xf86-video-fbdev --noconfirm --needed
else
  echo "proceeding with the installation"
fi

echo "---C----              Configuring mirrors                           ---C----" 
sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
sudo pacman -S reflector rsync --noconfirm --needed
sudo reflector -l 20 -f 5 -a 48 --sort rate --save /etc/pacman.d/mirrorlist
sudo cp etc/pacman.conf /etc/pacman.conf
sudo pacman -Sy neon-os-pacman --overwrite=\* --needed --noconfirm

echo "---C----              Installing linux kernel-headers                ---C----"
read -p "1)linux-zen  2)linux  3)linux-lts  4)other " answer4
if [[ $answer4 == "1" ]]
then
    echo "installing linux-zen-headers"
    sudo pacman -S linux-zen-headers --noconfirm --needed
elif [[ $answer4 == "2" ]]
then
    echo "installing linux-headers"
    sudo pacman -S linux-headers --noconfirm --needed
elif [[ $answer4 == "3" ]]
then
    echo "installing linux-lts-headers"
    sudo pacman -S linux-lts-headers --noconfirm --needed
else
    echo "please install your custom linux headers after install"
fi

echo "---C----             Installing Primary Gpu packages                  ---C----" 
read -p "is one of your gpu intel [Y/N]? " answer12
if [[ $answer12 == "Y" || $answer12 == "y" ]]
then
    echo "installing intel gpu driver"
    sudo pacman -S intel-media-driver xf86-video-intel --noconfirm --needed
else
    echo "terminated"
fi

echo "---C----             Installing Appropriate Gpu packages              ---C----" 
read -p "1)Nvidia  2)Amd  3)Intel  4)quit " answer5
if [[ $answer5 == "1" ]]
then
    echo "installing Nvidia"
    if [[ $answer4 == "1" ]]
    then
        sudo pacman -S nvidia-dkms nvidia --noconfirm --needed
    else
        sudo pacman -S nvidia --noconfirm --needed
    fi
elif [[ $answer5 == "2" ]]
then
    echo "installing intel"
    sudo pacman -S mesa --noconfirm --needed
elif [[ $answer5 == "3" ]]
then
    echo "installing amd"
    sudo pacman -S mesa mesa-vdpau --noconfirm --needed
    read -p "1)amdgpu  2)radeon " answer11
    if [[ $answer11 == "1" ]]
    then
        echo "installing amdgpu"
        sudo pacman -S xf86-video-amdgpu --noconfirm --needed
    elif [[ $answer11 == "2" ]]
    then
        echo "installing radeon"
        sudo pacman -S xf86-video-ati --noconfirm --needed
    else
        echo "terminated"
    fi
else
    echo "terminated"
fi

echo "---C----              Installing Hybrid Gpu packages                   ---C----"
read -p "1)Nvidia-hybrid  2)Amd-hybrid  3)quit " answer6
if [[ $answer6 == "1" ]]
then
    echo "installing Nvidia-Hybrid"
    read -p "1)Bumblebee  2)nvidia-prime  3)nvidia-xrun " answer7
    if [[ $answer7 == "1" ]]
    then
        sudo pacman -S Bumblebee bbswitch bbswitch-dkms --noconfirm --needed
    elif [[ $answer7 == "2" ]]
    then
        sudo pacman -S nvidia-prime bbswitch bbswitch-dkms --noconfirm --needed
    else
        sudo pacman -S nvidia-xrun bbswitch bbswitch-dkms --noconfirm --needed
    fi
#then
#    echo "placed Amd-Hybrid switch directory with scripts and configs in /opt/amd-hybrid-switcher"
else
    echo "terminated"
fi

echo "---C----              Installing Cpu Ucodes                         ---C----"
read -p "1)Intel-ucode  2)Amd-ucode  3)quit" answer6
if [[ $answer6 == "1" ]]
then
    echo "installing Intel-ucode"
    sudo pacman -S intel-ucode
    sudo grub-mkconfig -o /boot/grub/grub.cfg
elif [[ $answer6 == "2" ]]
then
    echo "installing Amd-ucode"
    sudo pacman -S amd-ucode
    sudo grub-mkconfig -o /boot/grub/grub.cfg
else
    echo "terminated"
fi

echo "---C----              Installing my packages                        ---C----"
sudo pacman -S - < pkglists/pacman.txt --overwrite=\* --noconfirm --needed

echo "---C----              running one or multiple monitors              ---C----"
read -p "are you running multiple monitors [Y/N]? " answer3
if [[ $answer3 == "Y" || $answer3 == "y" ]]
then
    echo "installing arandr"
    sudo pacman -S arandr --noconfirm --needed
else
    echo "proceeding with the installation"
fi

echo "---C----              Installing openssh/ssh                        ---C----"
read -p "do you want to install openssh/ssh [Y/N]? " answer10
if [[ $answer10 == "Y" || $answer10 == "y" ]]
then
    echo "installing openssh/ssh"
    sudo pacman -S openssh neon-os-sshd --noconfirm --needed --overwrite=\*
else
    echo "terminated"
fi

echo "############################################################################"
echo "########                   ADDING LOGIN MANAGER                     ########"
echo "############################################################################"

sudo systemctl enable sddm.service -f

echo "############################################################################"
echo "########                   ENABLING AUR AND SNAP                    ########"
echo "############################################################################"

#git clone https://aur.archlinux.org/paru-bin.git
cd paru-bin
makepkg -si
sudo pacman -S neon-os-paru --noconfirm --needed --overwrite=\*

echo "############################################################################"
echo "########                   INSTALLING AUR PACKAGES                  ########"
echo "############################################################################"

cd 
#paru -S - < neon-os/pkglists/yay.txt --noconfirm --needed
sudo pacman -S stdm-git --noconfirm --needed

echo "---C----              Installing optimus-manager                    ---C----"
#sudo mkdir /etc/sddm.conf.d/
read -p "do you want to install optimus-manager [Y/N]? " answer8
if [[ $answer8 == "Y" || $answer8 == "y" ]]
then
    echo "installing optimus-manager"
    paru -S optimus-manager-qt --noconfirm --needed
    sudo pacman -S neon-os-optimus-manager neon-os-sddm-nvidia --needed --noconfirm --overwrite=\*
else
    echo "terminated"
    sudo pacman -S neon-os-sddm --needed --noconfirm --overwrite=\*
fi

echo "############################################################################"
echo "########               ADDING WALLPAPERS FOR neon-os                ########"
echo "############################################################################"

cd
mkdir Pictures || echo ""
sudo mkdir /usr/share/themes || echo ""
cd Pictures
git clone https://gitlab.com/dwt1/wallpapers.git || echo ""

echo "############################################################################"
echo "########             CHOOSE THE TILLING WINDOW MANAGER(S)           ########"
echo "############################################################################"

read -p "do you want to install awesomewm [Y/N]? " answer20
if [[ $answer20 == "Y" || $answer20 == "y" ]]
then
    echo "installing awesomewm"
    paru -S awesome --noconfirm --needed
else
    echo "terminated"
fi

read -p "do you want to install qtile [Y/N]? " answer21
if [[ $answer21 == "Y" || $answer21 == "y" ]]
then
    echo "installing qtile"
    paru -S qtile --noconfirm --needed
else
    echo "terminated"
fi

read -p "do you want to install i3wm [Y/N]? " answer22
if [[ $answer22 == "Y" || $answer22 == "y" ]]
then
    echo "installing i3wm"
    paru -S i3-gaps i3blocks --noconfirm --needed
else
    echo "terminated"
fi

echo "############################################################################"
echo "########                  PLACING THE CONFIG FILES                  ########"
echo "############################################################################"

#cd ~/neon-os
#git clone https://gitlab.com/NEON-MMD/dotfiles.git
#cp -rf dotfiles/.config ~/
#cp -rf dotfiles/.emacs.d ~/
#sudo cp -r etc/all-themes-sddm/ /usr/share/sddm/themes/
#sudo cp etc/ufetch-arch /usr/bin/
#sudo cp -r snapper-configs/* /etc/snapper/configs/

echo "############################################################################"
echo "########                       CONFIGURING VIM                      ########"
echo "############################################################################"

sudo pacman -S powerline-fonts-git --noconfirm --needed
sudo fc-cache -r -v

echo "############################################################################"
echo "########                    ENABLING SERVICES                       ########"
echo "############################################################################"
sudo systemctl enable bluetooth || echo ""
sudo systemctl enable alsa-state.service || echo ""
sudo systemctl enable alsa-restore.service || echo ""
sudo systemctl enable pulseaudio || echo ""
sudo systemctl enable reflector.service || echo ""
sudo systemctl enable reflector.timer || echo ""
sudo systemctl enable snapper-timeline.timer || echo ""
sudo systemctl enable snapper-cleanup.timer || echo ""
sudo rcvboxdrv modprobe || echo ""
sudo timedatectl set-ntp true || echo ""
sudo systemctl mask systemd-rfkill.service || echo ""
sudo systemctl mask systemd-rfkill.socket || echo ""
systemctl enable --user pipewire.service p11-kit-server.service pulseaudio.service systemd-tmpfiles-clean.timer systemd-tmpfiles-setup.service || echo ""
sudo systemctl enable clamav-freshclam.service clamav-clamonacc.service clamav-daeme clamav-daemon.socket || echo ""
sudo systemctl enable libvirtd.service || echo ""

cd ~/neon-os
sudo mkdir -p /usr/local/lib/systemd/user/
sudo cp services/* /usr/local/lib/systemd/user/
cd services
systemctl enable --user emacs ssh-agent || echo ""
cd ..

echo "---C----			          LAPTOP OR DESKTOP			     ---C----"
read -p "are you running a laptop [Y/N]? " answer2
if [[ $answer2 == "y" || $answer2 == "Y" ]]
then
    echo "enabling tlp" 
    sudo pacman -S neon-os-tlp --noconfirm --needed --overwrite=\*
    sudo systemctl enable tlp
    sudo tlp start
else
    echo "proceeding with the installation"
fi

echo "############################################################################"
echo "########                   INSTALLING GNU EMACS                     ########"
echo "############################################################################"

#cd
#git clone https://aur.archlinux.org/emacs-git.git
#cd emacs-git
#sed -i 's/^JIT=\(     \)/JIT="YES"/' PKGBUILD
#makepkg --syncdeps --install
cd

echo "############################################################################"
echo "########                  ADDING USER TO GROUPS                     ########"
echo "############################################################################"

sudo usermod -aG kvm,libvirt,libvirt-qemu ${USER}

echo "############################################################################"
echo "########                      SETTING UP TPM                        ########"
echo "############################################################################"

read -p "1)TPM-1.2  2)TPM-2.0  3)Quit " answer
if [[ $answer == "1" ]]
then
    echo "installing TPM-1.2"
    paru -S tpm-tools trousers --noconfirm --needed
    modprobe tpm
    modprobe -a tpm_{atmel,infineon,nsc,tis,crb}
    sudo systemctl enable tcsd.service
elif [[ $answer == "2" ]]
then
    echo "installing TPM-2.0"
    sudo pacman -S tpm2-tools --noconfirm --needed
else
    echo "terminated"
fi

echo "############################################################################"
echo "########                  REPLACING SUDO WITH DOAS                  ########"
echo "############################################################################"

sudo chown -c root:root /etc/doas.conf
doas -- paru -Qtdq | paru -Rns - sudo

echo "############################################################################"
echo "########                  REBOOTING YOUR SYSTEM                     ########"
echo "############################################################################"

reboot
